/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.estadisticasnba;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.swing.JOptionPane;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import java.io.IOException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.properties.TextAlignment;
import com.itextpdf.kernel.font.PdfFont;
import com.itextpdf.kernel.font.PdfFontFactory;
import com.itextpdf.io.image.ImageData;
import com.itextpdf.io.image.ImageDataFactory;
import java.awt.Component;
import java.awt.Container;

/**
 *
 * @author dl260
 */
public class NBAversion3 extends javax.swing.JFrame {
    private Verificacion verificacionFrame = new Verificacion();
    private javax.swing.ButtonGroup menuButtonGroup;
    
    /**
     * Creates new form PruebaNBAJFrame
     */
    public NBAversion3() {
        initComponents();
        initMenuBar();
        
        equiposBox.setSelectedItem("Equipo1");
        actualizarJugadores();
    }
    
    private void initMenuBar() {
        menuButtonGroup = new javax.swing.ButtonGroup();

        menuButtonGroup.add(MenuOpcionPequeno);
        menuButtonGroup.add(MenuOpcionMediano);
        menuButtonGroup.add(MenuOpcionGrande);

        MenuOpcionPequeno.setSelected(true);

        MenuOpcionPequeno.addActionListener(evt -> actualizarFuenteTextoPersonalizado(1));
        MenuOpcionMediano.addActionListener(evt -> actualizarFuenteTextoPersonalizado(2));
        MenuOpcionGrande.addActionListener(evt -> actualizarFuenteTextoPersonalizado(3));
    }
    
    private void actualizarFuenteTextoPersonalizado(int opcionFuente) {
        for (Component component : getContentPane().getComponents()) {
            actualizarFuenteEnComponente(component, opcionFuente);
        }
    }

    private void actualizarFuenteEnComponente(Component component, int opcionFuente) {
        if (component instanceof TextoPersonalizado) {
            TextoPersonalizado label = (TextoPersonalizado) component;
            label.configurarEstilo(opcionFuente);
        } else if (component instanceof Container) {
            for (Component child : ((Container) component).getComponents()) {
                actualizarFuenteEnComponente(child, opcionFuente);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        equiposBox = new javax.swing.JComboBox<>();
        jugadoresBox = new javax.swing.JComboBox<>();
        Btn_guardar = new javax.swing.JButton();
        PanelTabuladoDatos = new javax.swing.JTabbedPane();
        PanelDatos1 = new javax.swing.JPanel();
        T_2Puntos = new javax.swing.JSpinner();
        T_2PuntosMetidos = new javax.swing.JSpinner();
        T_3Puntos = new javax.swing.JSpinner();
        T_3PuntosMetidos = new javax.swing.JSpinner();
        T_Libres = new javax.swing.JSpinner();
        T_LibresMetidos = new javax.swing.JSpinner();
        textoPersonalizado1 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado2 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado3 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado4 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado5 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado6 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        PanelDatos2 = new javax.swing.JPanel();
        T_rebotes = new javax.swing.JSpinner();
        T_taponesRecibidos = new javax.swing.JSpinner();
        T_asistencias = new javax.swing.JSpinner();
        T_robos = new javax.swing.JSpinner();
        T_taponesAfavor = new javax.swing.JSpinner();
        T_perdidas = new javax.swing.JSpinner();
        textoPersonalizado7 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado8 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado9 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado10 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado11 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        textoPersonalizado12 = new com.mycompany.estadisticasnba.TextoPersonalizado();
        btn_grafica = new javax.swing.JButton();
        Btn_generarPDF = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuTama√±oFuente = new javax.swing.JMenu();
        MenuOpcionPequeno = new javax.swing.JRadioButtonMenuItem();
        MenuOpcionMediano = new javax.swing.JRadioButtonMenuItem();
        MenuOpcionGrande = new javax.swing.JRadioButtonMenuItem();
        MenuCondiciones = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        equiposBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Equipo1", "Equipo2" }));
        equiposBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equiposBoxActionPerformed(evt);
            }
        });
        getContentPane().add(equiposBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 30, 220, 40));

        jugadoresBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jugadoresBoxActionPerformed(evt);
            }
        });
        getContentPane().add(jugadoresBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 30, 200, 40));

        Btn_guardar.setText("Guardar");
        Btn_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_guardarActionPerformed(evt);
            }
        });
        getContentPane().add(Btn_guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, 150, 40));

        PanelTabuladoDatos.setMinimumSize(new java.awt.Dimension(100, 100));

        PanelDatos1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        PanelDatos1.add(T_2Puntos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 100, 30));
        PanelDatos1.add(T_2PuntosMetidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 0, 100, 30));
        PanelDatos1.add(T_3Puntos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 100, 30));
        PanelDatos1.add(T_3PuntosMetidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 40, 100, 30));
        PanelDatos1.add(T_Libres, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 100, 30));
        PanelDatos1.add(T_LibresMetidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 80, 100, 30));

        textoPersonalizado1.setText("Tiros de 2 puntos");
        PanelDatos1.add(textoPersonalizado1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 130, 30));

        textoPersonalizado2.setText("Tiros de 3 puntos");
        PanelDatos1.add(textoPersonalizado2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 130, 30));

        textoPersonalizado3.setText("Tiros Libres");
        PanelDatos1.add(textoPersonalizado3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 130, 30));

        textoPersonalizado4.setText("Tiros de 2 metidos");
        PanelDatos1.add(textoPersonalizado4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 0, 140, 30));

        textoPersonalizado5.setText("Tiros de 3 metidos");
        PanelDatos1.add(textoPersonalizado5, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, 140, 30));

        textoPersonalizado6.setText("Tiros Libres metidos");
        PanelDatos1.add(textoPersonalizado6, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 80, 140, 30));

        PanelTabuladoDatos.addTab("Datos1", PanelDatos1);

        PanelDatos2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        PanelDatos2.add(T_rebotes, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 100, 30));
        PanelDatos2.add(T_taponesRecibidos, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 40, 100, 30));
        PanelDatos2.add(T_asistencias, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 100, 30));
        PanelDatos2.add(T_robos, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 80, 100, 30));
        PanelDatos2.add(T_taponesAfavor, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 100, 30));
        PanelDatos2.add(T_perdidas, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 0, 100, 30));

        textoPersonalizado7.setText("Rebotes");
        PanelDatos2.add(textoPersonalizado7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 130, 30));

        textoPersonalizado8.setText("Asistencias");
        PanelDatos2.add(textoPersonalizado8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 130, 30));

        textoPersonalizado9.setText("Robos");
        PanelDatos2.add(textoPersonalizado9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 130, 30));

        textoPersonalizado10.setText("Tapones a favor");
        PanelDatos2.add(textoPersonalizado10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 120, 130, 30));

        textoPersonalizado11.setText("Perdidas");
        PanelDatos2.add(textoPersonalizado11, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, 110, 30));

        textoPersonalizado12.setText("Tapones a favor");
        PanelDatos2.add(textoPersonalizado12, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 40, 110, 30));

        PanelTabuladoDatos.addTab("Datos2", PanelDatos2);

        getContentPane().add(PanelTabuladoDatos, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 490, 220));

        btn_grafica.setText("Grafica");
        btn_grafica.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_graficaMouseClicked(evt);
            }
        });
        getContentPane().add(btn_grafica, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 360, 140, 40));

        Btn_generarPDF.setText("Generar PDF");
        Btn_generarPDF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Btn_generarPDFMouseClicked(evt);
            }
        });
        Btn_generarPDF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_generarPDFActionPerformed(evt);
            }
        });
        getContentPane().add(Btn_generarPDF, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 150, 40));

        menuTama√±oFuente.setText("Tama√±o Fuente");

        MenuOpcionPequeno.setSelected(true);
        MenuOpcionPequeno.setText("Peque√±o");
        menuTama√±oFuente.add(MenuOpcionPequeno);

        MenuOpcionMediano.setSelected(true);
        MenuOpcionMediano.setText("Mediano");
        menuTama√±oFuente.add(MenuOpcionMediano);

        MenuOpcionGrande.setSelected(true);
        MenuOpcionGrande.setText("Grande");
        menuTama√±oFuente.add(MenuOpcionGrande);

        jMenuBar1.add(menuTama√±oFuente);

        MenuCondiciones.setText("Condiciones de Servicio");
        MenuCondiciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MenuCondicionesMouseClicked(evt);
            }
        });
        jMenuBar1.add(MenuCondiciones);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void equiposBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equiposBoxActionPerformed
        actualizarJugadores();
    }//GEN-LAST:event_equiposBoxActionPerformed

    private void jugadoresBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jugadoresBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jugadoresBoxActionPerformed

    private void Btn_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_guardarActionPerformed
        String equipoSeleccionado = (String) equiposBox.getSelectedItem();
        String jugadorSeleccionado = (String) jugadoresBox.getSelectedItem();

        if (jugadorSeleccionado == null || equipoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un equipo y un jugador.");
            return;
        }

        try {
            int tiros2 = (int) T_2Puntos.getValue();
            int tirosMetidos2 = (int) T_2PuntosMetidos.getValue();
            int tiros3 = (int) T_3Puntos.getValue();
            int tirosMetidos3 = (int) T_3PuntosMetidos.getValue();
            int libres = (int) T_Libres.getValue();
            int libresMetidos = (int) T_LibresMetidos.getValue();
            int rebotes = (int) T_rebotes.getValue();
            int asistencias = (int) T_asistencias.getValue();
            int robos = (int) T_robos.getValue();
            int taponesAFavor = (int) T_taponesAfavor.getValue();
            int perdidas = (int) T_perdidas.getValue();
            int taponesRecibidos = (int) T_taponesRecibidos.getValue();

            File archivoExcel = new File(equipoSeleccionado + ".xlsx");
            Workbook libro;
            Sheet hoja;

            if (archivoExcel.exists()) {
                try (FileInputStream fis = new FileInputStream(archivoExcel)) {
                    libro = new XSSFWorkbook(fis);
                }
            } else {
                libro = new XSSFWorkbook();
            }

            hoja = libro.getSheet(jugadorSeleccionado);
            if (hoja == null) {
                hoja = libro.createSheet(jugadorSeleccionado);
                Row encabezado = hoja.createRow(0);
                encabezado.createCell(0).setCellValue("Tiros de 2");
                encabezado.createCell(1).setCellValue("Tiros de 2 Metidos");
                encabezado.createCell(2).setCellValue("Tiros de 3");
                encabezado.createCell(3).setCellValue("Tiros de 3 Metidos");
                encabezado.createCell(4).setCellValue("Libres");
                encabezado.createCell(5).setCellValue("Libres Metidos");
                encabezado.createCell(6).setCellValue("Rebotes");
                encabezado.createCell(7).setCellValue("Asistencias");
                encabezado.createCell(8).setCellValue("Robos");
                encabezado.createCell(9).setCellValue("Tapones a Favor");
                encabezado.createCell(10).setCellValue("Perdidas");
                encabezado.createCell(11).setCellValue("Tapones Recibidos");
                
                encabezado.setHeightInPoints(25);
            }

            int ultimaFila = hoja.getLastRowNum() + 1;
            Row fila = hoja.createRow(ultimaFila);
            fila.createCell(0).setCellValue(tiros2);
            fila.createCell(1).setCellValue(tirosMetidos2);
            fila.createCell(2).setCellValue(tiros3);
            fila.createCell(3).setCellValue(tirosMetidos3);
            fila.createCell(4).setCellValue(libres);
            fila.createCell(5).setCellValue(libresMetidos);
            fila.createCell(6).setCellValue(rebotes);
            fila.createCell(7).setCellValue(asistencias);
            fila.createCell(8).setCellValue(robos);
            fila.createCell(9).setCellValue(taponesAFavor);
            fila.createCell(10).setCellValue(perdidas);
            fila.createCell(11).setCellValue(taponesRecibidos);

            for (int col = 0; col <= 11; col++) {
                hoja.setColumnWidth(col, 20 * 256);
            }
            
            actualizarHojaMedias(libro, equipoSeleccionado);

            try (FileOutputStream fos = new FileOutputStream(archivoExcel)) {
                libro.write(fos);
            }
            libro.close();

            JOptionPane.showMessageDialog(this, "Estad√≠sticas guardadas correctamente.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al guardar estad√≠sticas: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_Btn_guardarActionPerformed

    private void btn_graficaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_graficaMouseClicked
        String equipoSeleccionado = (String) equiposBox.getSelectedItem();
        String jugadorSeleccionado = (String) jugadoresBox.getSelectedItem();

        if (equipoSeleccionado == null || jugadorSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un equipo y un jugador.");
            return;
        }

        File archivoExcel = new File(equipoSeleccionado + ".xlsx");
        if (!archivoExcel.exists()) {
            JOptionPane.showMessageDialog(this, "El archivo del equipo seleccionado no existe.");
            return;
        }

        DefaultCategoryDataset datasetBarras = new DefaultCategoryDataset();
        DefaultCategoryDataset datasetLinea = new DefaultCategoryDataset();
        DefaultCategoryDataset datasetRebotes = new DefaultCategoryDataset();

        try (FileInputStream fis = new FileInputStream(archivoExcel)) {
            Workbook libro = new XSSFWorkbook(fis);
            Sheet hoja = libro.getSheet(jugadorSeleccionado);

            if (hoja == null) {
                JOptionPane.showMessageDialog(this, "No hay datos para el jugador seleccionado.");
                return;
            }

            Row encabezado = hoja.getRow(0);
            if (encabezado == null) {
                JOptionPane.showMessageDialog(this, "No hay encabezados en la hoja del jugador.");
                return;
            }

            int colTiros2 = -1, colTiros3 = -1, colTirosLibres = -1, colRebotes = -1;

            for (int i = 0; i < encabezado.getLastCellNum(); i++) {
                String categoria = encabezado.getCell(i).getStringCellValue();
                switch (categoria) {
                    case "Tiros de 2 Metidos":
                        colTiros2 = i;
                        break;
                    case "Tiros de 3 Metidos":
                        colTiros3 = i;
                        break;
                    case "Libres Metidos":
                        colTirosLibres = i;
                        break;
                    case "Rebotes":
                        colRebotes = i;
                        break;
                }
            }

            if (colTiros2 == -1 || colTiros3 == -1 || colTirosLibres == -1 || colRebotes == -1) {
                JOptionPane.showMessageDialog(this, "No se encontraron todas las columnas necesarias.");
                return;
            }

            int totalPuntos = 0;
            int numPartidos = 0;

            for (int i = 1; i <= hoja.getLastRowNum(); i++) {
                Row fila = hoja.getRow(i);
                if (fila == null) continue;

                try {
                    int tirosMetidos2 = (int) fila.getCell(colTiros2).getNumericCellValue();
                    int tirosMetidos3 = (int) fila.getCell(colTiros3).getNumericCellValue();
                    int tirosLibresMetidos = (int) fila.getCell(colTirosLibres).getNumericCellValue();
                    int rebotes = (int) fila.getCell(colRebotes).getNumericCellValue();

                    int puntosTotales = tirosMetidos2 + tirosMetidos3 + tirosLibresMetidos;

                    datasetBarras.addValue(puntosTotales, "Puntos", "Partido " + i);
                    datasetRebotes.addValue(rebotes, "Rebotes", "Partido " + i);

                    totalPuntos += puntosTotales;
                    numPartidos++;
                } catch (Exception e) {
                    System.err.println("Error al procesar la fila " + i + ": " + e.getMessage());
                }
            }

            double mediaPuntos = numPartidos > 0 ? (double) totalPuntos / numPartidos : 0;

            for (int i = 1; i <= numPartidos; i++) {
                datasetLinea.addValue(mediaPuntos, "Media", "Partido " + i);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo Excel: " + e.getMessage());
            e.printStackTrace();
            return;
        }

        JFreeChart graficoPuntos = ChartFactory.createBarChart(
                "Puntos y Media por Partido",
                "Partidos",
                "Puntos",
                datasetBarras
        );

        JFreeChart graficoRebotes = ChartFactory.createLineChart(
                "Rebotes por Partido de " + jugadorSeleccionado,
                "Partidos",
                "Rebotes",
                datasetRebotes
        );

        try {
            File carpetaGraficas = new File("graficas");
            if (!carpetaGraficas.exists()) {
                carpetaGraficas.mkdir();
            }

            File carpetaJugador = new File(carpetaGraficas, jugadorSeleccionado);
            if (!carpetaJugador.exists()) {
                carpetaJugador.mkdir();
            }

            File archivoGraficoPuntos = new File(carpetaJugador, "grafico_puntos_" + jugadorSeleccionado + ".jpg");
            if (archivoGraficoPuntos.exists()) {
                archivoGraficoPuntos.delete();
            }
            ChartUtils.saveChartAsJPEG(archivoGraficoPuntos, graficoPuntos, 800, 600);

            File archivoGraficoRebotes = new File(carpetaJugador, "grafico_rebotes_" + jugadorSeleccionado + ".jpg");
            if (archivoGraficoRebotes.exists()) {
                archivoGraficoRebotes.delete();
            }
            ChartUtils.saveChartAsJPEG(archivoGraficoRebotes, graficoRebotes, 800, 600);

            JOptionPane.showMessageDialog(this, "Gr√°ficas guardadas en la carpeta: " + carpetaJugador.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar las gr√°ficas: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btn_graficaMouseClicked

    private void Btn_generarPDFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_generarPDFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Btn_generarPDFActionPerformed

    private void Btn_generarPDFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Btn_generarPDFMouseClicked
        String equipoSeleccionado = (String) equiposBox.getSelectedItem();
        String jugadorSeleccionado = (String) jugadoresBox.getSelectedItem();

        if (equipoSeleccionado == null || jugadorSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, selecciona un equipo y un jugador.");
            return;
        }

        File archivoExcel = new File(equipoSeleccionado + ".xlsx");
        if (!archivoExcel.exists()) {
            JOptionPane.showMessageDialog(this, "El archivo del equipo seleccionado no existe.");
            return;
        }

        // Variables para las estad√≠sticas
        double tiros2 = 0, tiros2Metidos = 0;
        double tiros3 = 0, tiros3Metidos = 0;
        double libres = 0, libresMetidos = 0;
        int numPartidos = 0;

        try (FileInputStream fis = new FileInputStream(archivoExcel)) {
            Workbook libro = new XSSFWorkbook(fis);
            Sheet hoja = libro.getSheet(jugadorSeleccionado);

            if (hoja == null) {
                JOptionPane.showMessageDialog(this, "No hay datos para el jugador seleccionado.");
                return;
            }

            for (int i = 1; i <= hoja.getLastRowNum(); i++) {
                Row fila = hoja.getRow(i);
                if (fila == null) continue;

                tiros2 += fila.getCell(0).getNumericCellValue();
                tiros2Metidos += fila.getCell(1).getNumericCellValue();
                tiros3 += fila.getCell(2).getNumericCellValue();
                tiros3Metidos += fila.getCell(3).getNumericCellValue();
                libres += fila.getCell(4).getNumericCellValue();
                libresMetidos += fila.getCell(5).getNumericCellValue();
                numPartidos++;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al leer el archivo Excel: " + e.getMessage());
            e.printStackTrace();
            return;
        }

        // Calcular estad√≠sticas
        double mediaTriples = numPartidos > 0 ? tiros3Metidos / numPartidos : 0;
        double porcentajeFG = (tiros2 + tiros3 > 0) ? ((tiros2Metidos + tiros3Metidos) / (tiros2 + tiros3)) * 100 : 0;
        double porcentajeEFG = (tiros2 + tiros3 > 0) ? ((tiros2Metidos + 1.5 * tiros3Metidos) / (tiros2 + tiros3)) * 100 : 0;
        double puntosTotales = 2 * tiros2Metidos + 3 * tiros3Metidos + libresMetidos;
        double porcentajeTS = (tiros2 + tiros3 + 0.44 * libres > 0)
                ? (puntosTotales / (2 * (tiros2 + tiros3 + 0.44 * libres))) * 100
                : 0;

        // Crear el PDF
        try {
            // Crear el archivo PDF
            String pdfFileName = jugadorSeleccionado + "_" + equipoSeleccionado + ".pdf";
            PdfWriter writer = new PdfWriter(pdfFileName);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc);

            // T√≠tulo
            PdfFont titleFont = PdfFontFactory.createFont();
            Paragraph title = new Paragraph(jugadorSeleccionado + " - " + equipoSeleccionado)
                    .setFont(titleFont)
                    .setFontSize(18)
                    .setBold()
                    .setTextAlignment(TextAlignment.CENTER);
            document.add(title);
            document.add(new Paragraph("\n"));

            // A√±adir gr√°ficos
            ImageData graficoPuntosData = ImageDataFactory.create("grafico_puntos_" + jugadorSeleccionado + ".jpg");
            Image graficoPuntos = new Image(graficoPuntosData);
            graficoPuntos.scaleToFit(400, 200);
            document.add(graficoPuntos);

            document.add(new Paragraph("\n"));

            ImageData graficoRebotesData = ImageDataFactory.create("grafico_rebotes_" + jugadorSeleccionado + ".jpg");
            Image graficoRebotes = new Image(graficoRebotesData);
            graficoRebotes.scaleToFit(400, 200);
            document.add(graficoRebotes);

            // Otras estad√≠sticas
            Paragraph stats = new Paragraph("Otras estad√≠sticas:\n")
                    .setFont(titleFont)
                    .setFontSize(12)
                    .setTextAlignment(TextAlignment.LEFT);
            stats.add("Media de triples metidos por partido: " + String.format("%.2f", mediaTriples) + "\n");
            stats.add("%FG: " + String.format("%.2f", porcentajeFG) + "%\n");
            stats.add("%eFG: " + String.format("%.2f", porcentajeEFG) + "%\n");
            stats.add("%TS: " + String.format("%.2f", porcentajeTS) + "%\n");
            document.add(stats);

            // Cerrar documento
            document.close();

            JOptionPane.showMessageDialog(this, "PDF generado: " + pdfFileName);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al generar el PDF: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_Btn_generarPDFMouseClicked

    private void MenuCondicionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MenuCondicionesMouseClicked
        if (verificacionFrame == null || !verificacionFrame.isVisible()) {
                verificacionFrame = new Verificacion();
                verificacionFrame.setVisible(true);
            } else {
                verificacionFrame.toFront();
            }
    }//GEN-LAST:event_MenuCondicionesMouseClicked

    private void actualizarJugadores() {
        String equipoSeleccionado = (String) equiposBox.getSelectedItem();
        jugadoresBox.removeAllItems();

        if ("Equipo1".equals(equipoSeleccionado)) {
            jugadoresBox.addItem("Jugador 1A");
            jugadoresBox.addItem("Jugador 2A");
            jugadoresBox.addItem("Jugador 3A");
            jugadoresBox.addItem("Jugador 4A");
            jugadoresBox.addItem("Jugador 5A");
        } else if ("Equipo2".equals(equipoSeleccionado)) {
            jugadoresBox.addItem("Jugador 1B");
            jugadoresBox.addItem("Jugador 2B");
            jugadoresBox.addItem("Jugador 3B");
            jugadoresBox.addItem("Jugador 4B");
            jugadoresBox.addItem("Jugador 5B");
        }
    }
    
    private void actualizarHojaMedias(Workbook libro, String equipoSeleccionado) {
        Sheet hojaMedias = libro.getSheet("Medias");
        if (hojaMedias == null) {
            hojaMedias = libro.createSheet("Medias");
            Row encabezado = hojaMedias.createRow(0);
            encabezado.createCell(0).setCellValue("Jugador");
            encabezado.createCell(1).setCellValue("Media Tiros de 2");
            encabezado.createCell(2).setCellValue("Media Tiros de 2 Metidos");
            encabezado.createCell(3).setCellValue("Media Tiros de 3");
            encabezado.createCell(4).setCellValue("Media Tiros de 3 Metidos");
            encabezado.createCell(5).setCellValue("Media Libres");
            encabezado.createCell(6).setCellValue("Media Libres Metidos");
            encabezado.createCell(7).setCellValue("Media Rebotes");
            encabezado.createCell(8).setCellValue("Media Asistencias");
            encabezado.createCell(9).setCellValue("Media Robos");
            encabezado.createCell(10).setCellValue("Media Tapones a Favor");
            encabezado.createCell(11).setCellValue("Media Perdidas");
            encabezado.createCell(12).setCellValue("Media Tapones Recibidos");
            
            encabezado.setHeightInPoints(25);
        }

        int filaMedias = 1;
        for (int i = 0; i < jugadoresBox.getItemCount(); i++) {
            String jugador = jugadoresBox.getItemAt(i);
            Sheet hojaJugador = libro.getSheet(jugador);
            if (hojaJugador != null) {
                Row filaMedia = hojaMedias.getRow(filaMedias);
                if (filaMedia == null) {
                    filaMedia = hojaMedias.createRow(filaMedias);
                }
                filaMedia.createCell(0).setCellValue(jugador);

                for (int col = 0; col <= 11; col++) {
                    double media = calcularMedia(hojaJugador, col);
                    filaMedia.createCell(col + 1).setCellValue(media);
                }
                filaMedias++;
            }
        }
        for (int col = 0; col <= 12; col++) {
            hojaMedias.setColumnWidth(col, 25 * 256);
        }
    }
    
    private double calcularMedia(Sheet hoja, int columna) {
        double suma = 0;
        int filas = hoja.getLastRowNum();
        for (int i = 1; i <= filas; i++) {
            Row fila = hoja.getRow(i);
            suma += fila.getCell(columna).getNumericCellValue();
        }
        return filas == 0 ? 0 : suma / filas;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NBAversion3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NBAversion3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NBAversion3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NBAversion3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NBAversion3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Btn_generarPDF;
    private javax.swing.JButton Btn_guardar;
    private javax.swing.JMenu MenuCondiciones;
    private javax.swing.JRadioButtonMenuItem MenuOpcionGrande;
    private javax.swing.JRadioButtonMenuItem MenuOpcionMediano;
    private javax.swing.JRadioButtonMenuItem MenuOpcionPequeno;
    private javax.swing.JPanel PanelDatos1;
    private javax.swing.JPanel PanelDatos2;
    private javax.swing.JTabbedPane PanelTabuladoDatos;
    private javax.swing.JSpinner T_2Puntos;
    private javax.swing.JSpinner T_2PuntosMetidos;
    private javax.swing.JSpinner T_3Puntos;
    private javax.swing.JSpinner T_3PuntosMetidos;
    private javax.swing.JSpinner T_Libres;
    private javax.swing.JSpinner T_LibresMetidos;
    private javax.swing.JSpinner T_asistencias;
    private javax.swing.JSpinner T_perdidas;
    private javax.swing.JSpinner T_rebotes;
    private javax.swing.JSpinner T_robos;
    private javax.swing.JSpinner T_taponesAfavor;
    private javax.swing.JSpinner T_taponesRecibidos;
    private javax.swing.JButton btn_grafica;
    private javax.swing.JComboBox<String> equiposBox;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JComboBox<String> jugadoresBox;
    private javax.swing.JMenu menuTama√±oFuente;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado1;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado10;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado11;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado12;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado2;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado3;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado4;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado5;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado6;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado7;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado8;
    private com.mycompany.estadisticasnba.TextoPersonalizado textoPersonalizado9;
    // End of variables declaration//GEN-END:variables
}
